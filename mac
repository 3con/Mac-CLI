#!/bin/sh
#####################################################################
# mac - automation command line tools for OS X
#####################################################################
# Version: 0.1
# Date: December 8, 2015
# Author: Gabriel Guarino
#
# Notes: Collection of useful functions to automate OS X common
# tasks
#
#####################################################################

#--------------------------------------------------------------------
# Global Variables
#--------------------------------------------------------------------
mysql="/Applications/MAMP/Library/bin/mysql"
mysql_user="root"
mysql_password="root"
mysqldump="/Applications/MAMP/Library/bin/mysqldump"
dropbox_folder="/Volumes/Cloud/Dropbox/"
php="/Applications/MAMP/bin/php/php5.5.26/bin/php"
php_cli="/usr/local/bin/php"
phpmyadmin="http://localhost/phpMyAdmin/"

#--------------------------------------------------------------------
# Parameters
#--------------------------------------------------------------------
function=$1
firstParameter=$2
secondParameter=$3
allParameters=${@:2}

#--------------------------------------------------------------------
# Colors
#--------------------------------------------------------------------
GREEN='\033[0;32m'
GRAY='\033[0;37m'
LIGHTBLUE='\033[1;34m'
LIGHTGREEN='\033[1;32m'
WHITEBOLD='\033[1;37m'
NC='\033[0m' # No Color

#--------------------------------------------------------------------
# Functions
#--------------------------------------------------------------------
function get_branch_data()
{
  (
    for b in `git branch | sed 's:^[ *]*::'`; do
        git log -n 1 $b  --pretty="format:%ct|%ci" -- |
          sed "s^\(.*\)|\(.*\)$^\1|${b}|\2^"
    done
  )
}

#--------------------------------------------------------------------
# mac script commands list - all commands
#--------------------------------------------------------------------

if [ "$function" == "list" ]; then

    printf "\n${WHITEBOLD} mac – automation tools for OS X\n"
    printf "${WHITEBOLD}===================================\n"

    printf "\n${WHITEBOLD}General utilities: \n"

    printf "${LIGHTBLUE}mac update${GRAY}: Install OS X software updates, update installed Ruby gems, Homebrew, npm and their installed packages\n"
    printf "${LIGHTBLUE}mac restart${GRAY}: Restart OS X\n"
    printf "${LIGHTBLUE}mac sleep${GRAY}: Sleep mode\n"
    printf "${LIGHTBLUE}mac shutdown${GRAY}: Shutdown\n"
    printf "${LIGHTBLUE}mac clock${GRAY}: Show clock at top right position in Terminal/iTerm\n"
    printf "${LIGHTBLUE}mac screensaver${GRAY}: Start screensaver\n"
    printf "${LIGHTBLUE}mac folders:list${GRAY}: List folders in current directory\n"
    printf "${LIGHTBLUE}mac folder:size${GRAY}: Calculate current folder size\n"
    printf "${LIGHTBLUE}mac folders:remove-empty${GRAY}: Remove empty subdirectories\n"
    printf "${LIGHTBLUE}mac apps:close-all${GRAY}: Close all opened apps\n"
    printf "${LIGHTBLUE}mac apps:app-store${GRAY}: Get list of installed apps from App Store\n"
    printf "${LIGHTBLUE}mac eject-all${GRAY}: Eject all mounted volumes and disks\n"
    printf "${LIGHTBLUE}mac battery:status${GRAY}: Get battery information\n"
    printf "${LIGHTBLUE}mac info${GRAY}: Get OS X version information\n"
    printf "${LIGHTBLUE}mac find:text ${LIGHTGREEN}X${GRAY}: Find exact phrase recursively inside directory - ${LIGHTGREEN}X = Text string\n"
    printf "${LIGHTBLUE}mac zip:extract ${LIGHTGREEN}X${GRAY}: Extract Zip file to current folder - ${LIGHTGREEN}X = Zip file to extract\n"
    printf "${LIGHTBLUE}mac gzip:compress ${LIGHTGREEN}X${GRAY}: Compress current file using Gzip - ${LIGHTGREEN}X = File to compress\n"
    printf "${LIGHTBLUE}mac gzip:extract ${LIGHTGREEN}X${GRAY}: Extract Gzip file to current folder - ${LIGHTGREEN}X = Gzip file to extract\n"
    printf "${LIGHTBLUE}mac tar:compress ${LIGHTGREEN}X${GRAY}: Compress X file/directory using tar with progress indicator - ${LIGHTGREEN}X = File or directory\n"
    printf "${LIGHTBLUE}mac tar:extract ${LIGHTGREEN}X${GRAY}: Extract tar file to current folder - ${LIGHTGREEN}X = Tar file to extract\n"


    printf "\n\n${WHITEBOLD}Search utilities: \n"
    printf "${LIGHTBLUE}mac find:recent ${LIGHTGREEN}X${GRAY}: Find files modified in the last N minutes - ${LIGHTGREEN}X = number of minutes \n"
    printf "${LIGHTBLUE}mac search:replace ${LIGHTGREEN}X${GRAY}: Search and replace string in file - ${LIGHTGREEN}X = File to perform the search and replace operation\n"


    printf "\n\n${WHITEBOLD}Network utilities: \n"
    printf "${LIGHTBLUE}mac speedtest${GRAY}: Internet connection speed test \n"
    printf "${LIGHTBLUE}mac speedtest:infinite${GRAY}: Run internet speed test each 5 minutes \n"
    printf "${LIGHTBLUE}mac ports${GRAY}: List of used ports \n"
    printf "${LIGHTBLUE}mac ip:local${GRAY}: Get local IP address \n"
    printf "${LIGHTBLUE}mac ip:public${GRAY}: Get public IP address \n"


    printf "\n\n${WHITEBOLD}LAMP utilities: \n"
    printf "${LIGHTBLUE}mac mysql${GRAY}: Open MySQL app \n"
    printf "${LIGHTBLUE}mac mysql:cli${GRAY}: Start MAMP MySQL CLI \n"
    printf "${LIGHTBLUE}mac phpmyadmin${GRAY}: Open PHPMyAdmin\n"
    printf "${LIGHTBLUE}mac mysql:list${GRAY}: List all MySQL databases\n"
    printf "${LIGHTBLUE}mac mysql:export-all${GRAY}: Export all MySQL databases to individual files\n"
    printf "${LIGHTBLUE}mac mysql:export ${LIGHTGREEN}X${GRAY}: Export MySQL database to current directory - X = database name \n"
    printf "${LIGHTBLUE}mac mysql:import ${LIGHTGREEN}X${GRAY}: Import MySQL database - X = SQL file \n"
    printf "${LIGHTBLUE}mac mysql:import-table ${LIGHTGREEN}X${GRAY}: Import single MySQL database table -   X = SQL file containing database table \n"
    printf "${LIGHTBLUE}mac mysql:create ${LIGHTGREEN}X${GRAY}: Create MySQL database - X = Database name\n"
    printf "${LIGHTBLUE}mac mysql:drop ${LIGHTGREEN}X${GRAY}: Remove MySQL database - X = Database name\n"
    printf "${LIGHTBLUE}mac mysql:duplicate ${LIGHTGREEN}X${GRAY}: Duplicate MySQL database - X = Database name\n"
    printf "${LIGHTBLUE}mac mamp:start${GRAY}: Start MAMP Server (Apache and MySQL)\n"
    printf "${LIGHTBLUE}mac mamp:stop${GRAY}: Stop MAMP Server (Apache and MySQL)\n"
    printf "${LIGHTBLUE}mac mamp:restart${GRAY}: Restart MAMP Server (Apache and MySQL)\n"
    printf "${LIGHTBLUE}mac ssh:download-file ${LIGHTGREEN}X${GRAY}: Download file from remote server through SSH - X = Path of the remote file to download \n"
    printf "${LIGHTBLUE}mac ssh:download-folder ${LIGHTGREEN}X${GRAY}: Download entire folder from remote server through SSH - X = Path of the remote folder to download \n"
    printf "${LIGHTBLUE}mac ssh:upload ${LIGHTGREEN}X${GRAY}: Upload file to remote server through SSH - X = Path of the file to upload to the remote server \n"
    printf "${LIGHTBLUE}mac php:syntax${GRAY}: Check PHP Syntax for all PHP files in current location \n"
    printf "${LIGHTBLUE}mac php:info${GRAY}: Get PHP info on command line \n"
    printf "${LIGHTBLUE}mac hosts:edit${GRAY}: Edit hosts file \n"
    printf "${LIGHTBLUE}mac ssh-key:copy${GRAY}: Copy SSH Public Key \n"


    printf "\n\n${WHITEBOLD}Web Development utilities: \n"
    printf "${LIGHTBLUE}mac monitor ${LIGHTGREEN}X${GRAY}: Monitor file changes (for example: log file) - X = File to monitor \n"


    printf "\n\n${WHITEBOLD}Performance and maintenance utilities: \n"
    printf "${LIGHTBLUE}mac memory${GRAY}: See memory usage sorted by memory consumption \n"
    printf "${LIGHTBLUE}mac trash:empty${GRAY}: Empty trash\n"
    printf "${LIGHTBLUE}mac trash:size${GRAY}: Calculate trash size\n"
    printf "${LIGHTBLUE}mac desktop:cleanup${GRAY}: Remove all files and directories from the Desktop directory\n"
    printf "${LIGHTBLUE}mac downloads:cleanup${GRAY}: Remove all files and directories from the Downloads directory\n"

    printf "\n\n${WHITEBOLD}iTerm / Terminal utilities: \n"
    printf "${LIGHTBLUE}mac iterm:tab-title${GRAY}: Set title to current iTerm tab \n"


    printf "\n\n${WHITEBOLD}GIT utilities: \n"
    printf "${LIGHTBLUE}mac git:config${GRAY}: Display local Git configuration \n"
    printf "${LIGHTBLUE}mac git:open${GRAY}: Open current repository on Github \n"
    printf "${LIGHTBLUE}mac git:create-branch${GRAY}: Create branch based on current branch \n"
    printf "${LIGHTBLUE}mac git:fresh${GRAY}: Get last update date for all branches in current project \n"
    printf "${LIGHTBLUE}mac git:undo-commit${GRAY}: Undo latest commit \n"
    printf "${LIGHTBLUE}mac git:log${GRAY}: See latest commits IDs and titles for current branch \n"
    printf "${LIGHTBLUE}mac git:branch${GRAY}: See all branches \n"
    printf "${LIGHTBLUE}mac git:remove${GRAY}: Remove GIT from current project \n"
    printf "${LIGHTBLUE}mac git:settings${GRAY}: Check GIT settings \n"
    printf "${LIGHTBLUE}mac git:open${GRAY}: Open current GIT repository URL \n"


    printf "\n\n${WHITEBOLD}Web utilities: \n"
    printf "${LIGHTBLUE}mac web:download-images${GRAY}: Download all images from website to current directory \n"


    printf "\n\n${WHITEBOLD}Homebrew utilities: \n"
    printf "${LIGHTBLUE}mac brew:list${GRAY}: Get list of installed Homebrew packages \n"


    printf "\n\n${WHITEBOLD}Xcode utilities: \n"
    printf "${LIGHTBLUE}mac xcode:cleanup${GRAY}: Cleanup XCode files to free up hard disk space \n"


    printf "\n\n${WHITEBOLD}Magento utilities: \n"
    printf "${LIGHTBLUE}mac magento:version${GRAY}: Get Magento version from current project on command line \n"


    printf "\n\n${WHITEBOLD}Executable apps: \n"
    printf "${LIGHTBLUE}mac firefox${GRAY}: Open Firefox \n"
    printf "${LIGHTBLUE}mac chrome${GRAY}: Open Chrome \n"
    printf "${LIGHTBLUE}mac safari${GRAY}: Open Safari \n"
    printf "${LIGHTBLUE}mac phpstorm${GRAY}: Open PHPStorm \n"
    printf "${LIGHTBLUE}mac mamp${GRAY}: Open MAMP \n"
    printf "${LIGHTBLUE}mac filezilla${GRAY}: Open Filezilla \n"
    printf "${LIGHTBLUE}mac gotomeeting${GRAY}: Open GoToMeeting \n"
    printf "${LIGHTBLUE}mac xcode${GRAY}: Open Xcode \n"
    printf "${LIGHTBLUE}mac snippetslab${GRAY}: Open SnippetsLab \n"
    printf "${LIGHTBLUE}mac preview${GRAY}: Open Preview \n"
    printf "${LIGHTBLUE}mac photoshop${GRAY}: Open Photoshop \n"
    printf "${LIGHTBLUE}mac skype${GRAY}: Open Skype \n"
    printf "${LIGHTBLUE}mac textedit${GRAY}: Open TextEdit \n"
    printf "${LIGHTBLUE}mac sourcetree${GRAY}: Open SourceTree \n"
    printf "${LIGHTBLUE}mac stree${GRAY}: Open current directory in SourceTree \n"
    printf "${LIGHTBLUE}mac quiver${GRAY}: Open Quiver \n"
    printf "${LIGHTBLUE}mac virtualbox${GRAY}: Open VirtualBox \n"
    printf "${LIGHTBLUE}mac pixelmator${GRAY}: Open Pixelmator \n"
    printf "${LIGHTBLUE}mac vlc${GRAY}: Open VLC \n"
    printf "${LIGHTBLUE}mac kaleidoscope${GRAY}: Open Kaleidoscope \n"
    printf "${LIGHTBLUE}mac mindnode${GRAY}: Open MindNode \n"
    printf "${LIGHTBLUE}mac paw${GRAY}: Open Paw \n"
    printf "${LIGHTBLUE}mac appstore${GRAY}: Open App Store \n"
    printf "${LIGHTBLUE}mac goodtask${GRAY}: Open GoodTask \n"
    printf "${LIGHTBLUE}mac notes${GRAY}: Open Notes \n"

#--------------------------------------------------------------------
# mac script commands list - general commands
#--------------------------------------------------------------------

elif [ "$function" == "list:general" ]; then

    printf "\n${WHITEBOLD} mac – automation tools for OS X\n"
    printf "${WHITEBOLD}==================================="

    printf "\n${WHITEBOLD}General utilities: \n"

    printf "${LIGHTBLUE}mac update${GRAY}: Install OS X software updates, update installed Ruby gems, Homebrew, npm and their installed packages\n"
    printf "${LIGHTBLUE}mac restart${GRAY}: Restart OS X\n"
    printf "${LIGHTBLUE}mac sleep${GRAY}: Sleep mode\n"
    printf "${LIGHTBLUE}mac shutdown${GRAY}: Shutdown\n"
    printf "${LIGHTBLUE}mac clock${GRAY}: Show clock at top right position in Terminal/iTerm\n"
    printf "${LIGHTBLUE}mac screensaver${GRAY}: Start screensaver\n"
    printf "${LIGHTBLUE}mac folders:list${GRAY}: List folders in current directory\n"
    printf "${LIGHTBLUE}mac folder:size${GRAY}: Calculate current folder size\n"
    printf "${LIGHTBLUE}mac folders:remove-empty${GRAY}: Remove empty subdirectories\n"
    printf "${LIGHTBLUE}mac apps:close-all${GRAY}: Close all opened apps\n"
    printf "${LIGHTBLUE}mac apps:app-store${GRAY}: Get list of installed apps from App Store\n"
    printf "${LIGHTBLUE}mac eject-all${GRAY}: Eject all mounted volumes and disks\n"
    printf "${LIGHTBLUE}mac battery:status${GRAY}: Get battery information\n"
    printf "${LIGHTBLUE}mac info${GRAY}: Get OS X version information\n"
    printf "${LIGHTBLUE}mac find:text ${LIGHTGREEN}X${GRAY}: Find exact phrase recursively inside directory - ${LIGHTGREEN}X = Text string\n"
    printf "${LIGHTBLUE}mac zip:extract ${LIGHTGREEN}X${GRAY}: Extract Zip file to current folder - ${LIGHTGREEN}X = Zip file to extract\n"
    printf "${LIGHTBLUE}mac gzip:compress ${LIGHTGREEN}X${GRAY}: Compress current file using Gzip - ${LIGHTGREEN}X = File to compress\n"
    printf "${LIGHTBLUE}mac gzip:extract ${LIGHTGREEN}X${GRAY}: Extract Gzip file to current folder - ${LIGHTGREEN}X = Gzip file to extract\n"
    printf "${LIGHTBLUE}mac tar:compress ${LIGHTGREEN}X${GRAY}: Compress X file/directory using tar with progress indicator - ${LIGHTGREEN}X = File or directory\n"
    printf "${LIGHTBLUE}mac tar:extract ${LIGHTGREEN}X${GRAY}: Extract tar file to current folder - ${LIGHTGREEN}X = Tar file to extract\n"

#--------------------------------------------------------------------
# mac script commands list - search commands
#--------------------------------------------------------------------

elif [ "$function" == "list:search" ]; then

    printf "\n${WHITEBOLD} mac – automation tools for OS X\n"
    printf "${WHITEBOLD}==================================="

    printf "\n\n${WHITEBOLD}Search utilities: \n"
    printf "${LIGHTBLUE}mac find:recent ${LIGHTGREEN}X${GRAY}: Find files modified in the last N minutes - ${LIGHTGREEN}X = number of minutes \n"
    printf "${LIGHTBLUE}mac search:replace ${LIGHTGREEN}X${GRAY}: Search and replace string in file - ${LIGHTGREEN}X = File to perform the search and replace operation\n"

#--------------------------------------------------------------------
# mac script commands list - network commands
#--------------------------------------------------------------------

elif [ "$function" == "list:network" ]; then

    printf "\n${WHITEBOLD} mac – automation tools for OS X\n"
    printf "${WHITEBOLD}==================================="

    printf "\n\n${WHITEBOLD}Network utilities: \n"
    printf "${LIGHTBLUE}mac speedtest${GRAY}: Internet connection speed test \n"
    printf "${LIGHTBLUE}mac speedtest:infinite${GRAY}: Run internet speed test each 5 minutes \n"
    printf "${LIGHTBLUE}mac ports${GRAY}: List of used ports \n"
    printf "${LIGHTBLUE}mac ip:local${GRAY}: Get local IP address \n"
    printf "${LIGHTBLUE}mac ip:public${GRAY}: Get public IP address \n"


#--------------------------------------------------------------------
# mac script commands list - LAMP commands
#--------------------------------------------------------------------

elif [ "$function" == "list:lamp" ]; then

    printf "\n${WHITEBOLD} mac – automation tools for OS X\n"
    printf "${WHITEBOLD}==================================="

    printf "\n\n${WHITEBOLD}LAMP utilities: \n"
    printf "${LIGHTBLUE}mac mysql${GRAY}: Open MySQL app \n"
    printf "${LIGHTBLUE}mac mysql-cli${GRAY}: Start MAMP MySQL CLI \n"
    printf "${LIGHTBLUE}mac phpmyadmin${GRAY}: Open PHPMyAdmin\n"
    printf "${LIGHTBLUE}mac mysql:list${GRAY}: List all MySQL databases\n"
    printf "${LIGHTBLUE}mac mysql:export-all${GRAY}: Export all MySQL databases to individual files\n"
    printf "${LIGHTBLUE}mac mysql:export ${LIGHTGREEN}X${GRAY}: Export MySQL database to current directory - X = database name \n"
    printf "${LIGHTBLUE}mac mysql:import ${LIGHTGREEN}X${GRAY}: Import MySQL database - X = SQL file \n"
    printf "${LIGHTBLUE}mac mysql:import-table ${LIGHTGREEN}X${GRAY}: Import single MySQL database table -   X = SQL file containing database table \n"
    printf "${LIGHTBLUE}mac mysql:create ${LIGHTGREEN}X${GRAY}: Create MySQL database - X = Database name\n"
    printf "${LIGHTBLUE}mac mysql:drop ${LIGHTGREEN}X${GRAY}: Remove MySQL database - X = Database name\n"
    printf "${LIGHTBLUE}mac mysql:duplicate ${LIGHTGREEN}X${GRAY}: Duplicate MySQL database - X = Database name\n"
    printf "${LIGHTBLUE}mac mamp:start${GRAY}: Start MAMP Server (Apache and MySQL)\n"
    printf "${LIGHTBLUE}mac mamp:stop${GRAY}: Stop MAMP Server (Apache and MySQL)\n"
    printf "${LIGHTBLUE}mac mamp:restart${GRAY}: Restart MAMP Server (Apache and MySQL)\n"
    printf "${LIGHTBLUE}mac ssh:download-file ${LIGHTGREEN}X${GRAY}: Download file from remote server through SSH - X = Path of the remote file to download \n"
    printf "${LIGHTBLUE}mac ssh:download-folder ${LIGHTGREEN}X${GRAY}: Download entire folder from remote server through SSH - X = Path of the remote folder to download \n"
    printf "${LIGHTBLUE}mac ssh:upload ${LIGHTGREEN}X${GRAY}: Upload file to remote server through SSH - X = Path of the file to upload to the remote server \n"
    printf "${LIGHTBLUE}mac php:syntax${GRAY}: Check PHP Syntax for all PHP files in current location \n"
    printf "${LIGHTBLUE}mac php:info${GRAY}: Get PHP info on command line \n"
    printf "${LIGHTBLUE}mac hosts:edit${GRAY}: Edit hosts file \n"
    printf "${LIGHTBLUE}mac ssh-key:copy${GRAY}: Copy SSH Public Key \n"

#--------------------------------------------------------------------
# mac script commands list - web development commands
#--------------------------------------------------------------------

elif [ "$function" == "list:web-dev" ]; then

    printf "\n${WHITEBOLD} mac – automation tools for OS X\n"
    printf "${WHITEBOLD}==================================="

    printf "\n\n${WHITEBOLD}Web Development utilities: \n"
    printf "${LIGHTBLUE}mac monitor ${LIGHTGREEN}X${GRAY}: Monitor file changes (for example: log file) - X = File to monitor \n"

#--------------------------------------------------------------------
# mac script commands list - performance commands
#--------------------------------------------------------------------

elif [ "$function" == "list:performance" ]; then

    printf "\n${WHITEBOLD} mac – automation tools for OS X\n"
    printf "${WHITEBOLD}==================================="

    printf "\n\n${WHITEBOLD}Performance and maintenance utilities: \n"
    printf "${LIGHTBLUE}mac memory${GRAY}: See memory usage sorted by memory consumption \n"
    printf "${LIGHTBLUE}mac trash:empty${GRAY}: Empty trash\n"
    printf "${LIGHTBLUE}mac trash:size${GRAY}: Calculate trash size\n"
    printf "${LIGHTBLUE}mac desktop:cleanup${GRAY}: Remove all files and directories from the Desktop directory\n"
    printf "${LIGHTBLUE}mac downloads:cleanup${GRAY}: Remove all files and directories from the Downloads directory\n"

#--------------------------------------------------------------------
# mac script commands list - terminal commands
#--------------------------------------------------------------------

elif [ "$function" == "list:terminal" ]; then

    printf "\n${WHITEBOLD} mac – automation tools for OS X\n"
    printf "${WHITEBOLD}==================================="

    printf "\n\n${WHITEBOLD}iTerm / Terminal utilities: \n"
    printf "${LIGHTBLUE}mac iterm:tab-title${GRAY}: Set title to current iTerm tab \n"

#--------------------------------------------------------------------
# mac script commands list - GIT commands
#--------------------------------------------------------------------

elif [ "$function" == "list:git" ]; then

    printf "\n${WHITEBOLD} mac – automation tools for OS X\n"
    printf "${WHITEBOLD}==================================="

    printf "\n\n${WHITEBOLD}GIT utilities: \n"
    printf "${LIGHTBLUE}mac git:config${GRAY}: Display local Git configuration \n"
    printf "${LIGHTBLUE}mac git:open${GRAY}: Open current repository on Github \n"
    printf "${LIGHTBLUE}mac git:create-branch${GRAY}: Create branch based on current branch \n"
    printf "${LIGHTBLUE}mac git:fresh${GRAY}: Get last update date for all branches in current project \n"
    printf "${LIGHTBLUE}mac git:undo-commit${GRAY}: Undo latest commit \n"
    printf "${LIGHTBLUE}mac git:log${GRAY}: See latest commits IDs and titles for current branch \n"
    printf "${LIGHTBLUE}mac git:branch${GRAY}: See all branches \n"
    printf "${LIGHTBLUE}mac git:remove${GRAY}: Remove GIT from current project \n"
    printf "${LIGHTBLUE}mac git:settings${GRAY}: Check GIT settings \n"
    printf "${LIGHTBLUE}mac git:open${GRAY}: Open current GIT repository URL \n"



#--------------------------------------------------------------------
# mac script commands list - web commands
#--------------------------------------------------------------------

elif [ "$function" == "list:web" ]; then

    printf "\n${WHITEBOLD} mac – automation tools for OS X\n"
    printf "${WHITEBOLD}==================================="

    printf "\n\n${WHITEBOLD}Web utilities: \n"
    printf "${LIGHTBLUE}mac web:download-images${GRAY}: Download all images from website to current directory \n"

#--------------------------------------------------------------------
# mac script commands list - homebrew commands
#--------------------------------------------------------------------

elif [ "$function" == "list:brew" ]; then

    printf "\n${WHITEBOLD} mac – automation tools for OS X\n"
    printf "${WHITEBOLD}==================================="

    printf "\n\n${WHITEBOLD}Homebrew utilities: \n"
    printf "${LIGHTBLUE}mac brew:list${GRAY}: Get list of installed Homebrew packages \n"

#--------------------------------------------------------------------
# mac script commands list - xCode commands
#--------------------------------------------------------------------

elif [ "$function" == "list:xcode" ]; then

    printf "\n${WHITEBOLD} mac – automation tools for OS X\n"
    printf "${WHITEBOLD}==================================="

    printf "\n\n${WHITEBOLD}Xcode utilities: \n"
    printf "${LIGHTBLUE}mac xcode:cleanup${GRAY}: Cleanup XCode files to free up hard disk space \n"

#--------------------------------------------------------------------
# mac script commands list - Magento commands
#--------------------------------------------------------------------

elif [ "$function" == "list:magento" ]; then

    printf "\n${WHITEBOLD} mac – automation tools for OS X\n"
    printf "${WHITEBOLD}==================================="

    printf "\n\n${WHITEBOLD}Magento utilities: \n"
    printf "${LIGHTBLUE}mac magento:version${GRAY}: Get Magento version from current project on command line \n"

#--------------------------------------------------------------------
# mac script commands list - apps commands
#--------------------------------------------------------------------

elif [ "$function" == "list:apps" ]; then

    printf "\n${WHITEBOLD} mac – automation tools for OS X\n"
    printf "${WHITEBOLD}==================================="

    printf "\n\n${WHITEBOLD}Executable apps: \n"
    printf "${LIGHTBLUE}mac firefox${GRAY}: Open Firefox \n"
    printf "${LIGHTBLUE}mac chrome${GRAY}: Open Chrome \n"
    printf "${LIGHTBLUE}mac safari${GRAY}: Open Safari \n"
    printf "${LIGHTBLUE}mac phpstorm${GRAY}: Open PHPStorm \n"
    printf "${LIGHTBLUE}mac mamp${GRAY}: Open MAMP \n"
    printf "${LIGHTBLUE}mac filezilla${GRAY}: Open Filezilla \n"
    printf "${LIGHTBLUE}mac gotomeeting${GRAY}: Open GoToMeeting \n"
    printf "${LIGHTBLUE}mac xcode${GRAY}: Open Xcode \n"
    printf "${LIGHTBLUE}mac snippetslab${GRAY}: Open SnippetsLab \n"
    printf "${LIGHTBLUE}mac preview${GRAY}: Open Preview \n"
    printf "${LIGHTBLUE}mac photoshop${GRAY}: Open Photoshop \n"
    printf "${LIGHTBLUE}mac skype${GRAY}: Open Skype \n"
    printf "${LIGHTBLUE}mac textedit${GRAY}: Open TextEdit \n"
    printf "${LIGHTBLUE}mac sourcetree${GRAY}: Open SourceTree \n"
    printf "${LIGHTBLUE}mac stree${GRAY}: Open current directory in SourceTree \n"
    printf "${LIGHTBLUE}mac quiver${GRAY}: Open Quiver \n"
    printf "${LIGHTBLUE}mac virtualbox${GRAY}: Open VirtualBox \n"
    printf "${LIGHTBLUE}mac pixelmator${GRAY}: Open Pixelmator \n"
    printf "${LIGHTBLUE}mac vlc${GRAY}: Open VLC \n"
    printf "${LIGHTBLUE}mac kaleidoscope${GRAY}: Open Kaleidoscope \n"
    printf "${LIGHTBLUE}mac mindnode${GRAY}: Open MindNode \n"
    printf "${LIGHTBLUE}mac paw${GRAY}: Open Paw \n"
    printf "${LIGHTBLUE}mac appstore${GRAY}: Open App Store \n"
    printf "${LIGHTBLUE}mac goodtask${GRAY}: Open GoodTask \n"
    printf "${LIGHTBLUE}mac notes${GRAY}: Open Notes \n"

#--------------------------------------------------------------------
# General utilities
#--------------------------------------------------------------------
elif [ "$function" == "restart" ]; then
	printf "${GREEN}osascript -e 'tell app 'loginwindow' to «event aevtrrst»''\n\n${NC}"
	osascript -e 'tell app "loginwindow" to «event aevtrrst»'

elif [ "$function" == "sleep" ]; then
	printf "${GREEN}pmset sleepnow\n\n${NC}"
	pmset sleepnow

elif [ "$function" == "shutdown" ]; then
	printf "${GREEN}osascript -e 'tell app 'loginwindow' to «event aevtrsdn»'\n\n${NC}"
	osascript -e 'tell app "loginwindow" to «event aevtrsdn»'
	pmset sleepnow

elif [ "$function" == "clock" ]; then
	printf "${GREEN}while sleep 1;do tput sc;tput cup 0 $(($(tput cols)-29));date;tput rc;done &'\n\n${NC}"
	while sleep 1;do tput sc;tput cup 0 $(($(tput cols)-29));date;tput rc;done &

# Remove files older than X days in current folder
elif [ "$function" == "files:remove-older" ]; then
	printf "${GREEN}find . -ctime +${GRAY}${firstParameter}${GREEN} -print0 | xargs -0 -n1\n\n${NC}"
	echo "Removing files older than "$firstParameter" days..."
	find . -ctime +$firstParameter -print0 | xargs -0 -n1

# Calculate folder size
elif [ "$function" == "folder:size" ]; then
	printf "${GREEN}du -sh .\n\n${NC}"
	echo "Calculating folder size...\n"
	echo "Folder size:"
	du -sh .

# List folders in current directory
elif [ "$function" == "folders:list" ]; then
	printf "${GREEN}ls -d */\n\n${NC}"
	ls -d */

# Remove empty subdirectories
elif [ "$function" == "folders:remove-empty" ]; then
	printf "${GREEN}find . -type d -empty -delete\n\n${NC}"
	find . -type d -empty -delete

# Close all opened apps
elif [ "$function" = "apps:close-all" ]; then
	printf "${GREEN}ignore='grep\|iTerm\|Finder\|Dropbox\|Bartender'\n${NC}"
	printf "${GREEN}ps aux | grep /Applications | grep -v $ignore | sed "s/\ *\ /\ /g" | cut -d ' ' -f 2 | xargs -I X kill -9 X\n\n${NC}"
	# To customize ignored apps, just put the keywords in $ignore
	# To test which apps you are going to kill, run:
	# ps aux | grep /Applications | grep -v $ignore | sed "s/\ *\ /\ /g" | cut -d ' ' -f 11 | xargs -I X echo X
	ignore="grep\|iTerm\|Finder\|Dropbox\|Bartender"
	ps aux | grep /Applications | grep -v $ignore | sed "s/\ *\ /\ /g" | cut -d ' ' -f 2 | xargs -I X kill -9 X

# Get list of installed apps from the App Store
elif [ "$function" == "apps:app-store" ]; then
	printf "${GREEN}find /Applications -path '*Contents/_MASReceipt/receipt' -maxdepth 4 -print |\sed 's#.app/Contents/_MASReceipt/receipt#.app#g; s#/Applications/##'\n\n${NC}"
	echo "Getting list of installed apps from the App Store...\n"
	find /Applications -path '*Contents/_MASReceipt/receipt' -maxdepth 4 -print |\sed 's#.app/Contents/_MASReceipt/receipt#.app#g; s#/Applications/##'

# Start screensaver
elif [ "$function" == "screensaver" ]; then
	printf "${GREEN}open -a /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app\n\n${NC}"
	open -a /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app

# Eject all mounted volumes and disk
elif [ "$function" == "eject-all" ]; then
	printf "${GREEN}osascript -e 'tell application 'Finder' to eject (every disk whose executable is true)'\n\n${NC}"
	osascript -e 'tell application "Finder" to eject (every disk whose executable is true)'

# Get battery information
elif [ "$function" == "battery:status" ]; then
	printf "${GREEN}system_profiler SPPowerDataType | awk '/Full/ || /Remaining/ || /Cycle/ { printf }' | sed -e 's/[^:]*/Battery/' -e 's/ *R.*):./\//' -e 's/ *Cycle/ (mAh)     Cycle/'\n\n${NC}"
	system_profiler SPPowerDataType | awk '/Full/ || /Remaining/ || /Cycle/ { printf }' | sed -e 's/[^:]*/Battery/' -e 's/ *R.*):./\//' -e 's/ *Cycle/ (mAh)     Cycle/'

# Install OS X software updates, update installed Ruby gems, Homebrew, npm and their installed packages
elif [ "$function" == "update" ]; then
	printf "${GREEN}sudo softwareupdate -i -a;\n\n${NC}"
	echo "Updating OS X...\n"
	sudo softwareupdate -i -a;
	printf "${GREEN}brew update; brew upgrade --all; brew cleanup;\n\n${NC}"
	echo "Updating Homebrew and its installed packages...\n"
	brew update; brew upgrade --all; brew cleanup;
	printf "${GREEN}npm install npm -g; npm update -g;\n\n${NC}"
	echo "Updating npm and its installed packages...\n"
	npm install npm -g; npm update -g;
	printf "${GREEN}sudo gem update --system; sudo gem update\n\n${NC}"
	echo "Updating installed Ruby gems...\n"
	sudo gem update --system; sudo gem update
	echo "Your system has been successfully updated"

# Find text in current directory
elif [ "$function" == "find:text" ]; then

	if [ ! -z "$allParameters" -a "$allParameters" != " " ]; then
		printf "${GREEN}find . -type f -exec grep -i '${GRAY}${firstParameter}${GREEN}' {} \; -print\n\n${NC}"
		echo "Recursively find '"$allParameters"' inside directory...\n"
		find . -type f -exec grep -i "$allParameters" {} \; -print
	else
		echo "Please introduce text to search. E.g:\n"
		echo "mac find:text Sample Search Text"
	fi

# Extract Zip file
elif [ "$function" == "zip:extract" ]; then

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
		printf "${GREEN}unzip ${GRAY}${firstParameter}\n\n${NC}"
		unzip $firstParameter
	else
		echo "Please specify the Zip file to extract.\n"
		echo "E.g.: zip:extract sample_file.zip"
	fi

# Compress Gzip file
elif [ "$function" == "gzip:compress" ]; then

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
		printf "${GREEN}gzip ${GRAY}${firstParameter}\n\n${NC}"
		gzip $firstParameter
	else
		echo "Please specify the file to compress.\n"
		echo "E.g.: gzip:compress sample_file"
	fi

# Extract Gzip file
elif [ "$function" == "gzip:extract" ]; then

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
		printf "${GREEN}gzip -d ${GRAY}${firstParameter}\n\n${NC}"
		gzip -d $firstParameter
	else
		echo "Please specify the Gzip file to extract.\n"
		echo "E.g.: gzip:extract sample_file.gz"
	fi

# Extract tar file
elif [ "$function" == "tar:extract" ]; then

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
		printf "${GREEN}tar -xvzf ${GRAY}${firstParameter}\n\n${NC}"
		tar -xvzf $firstParameter
	else
		echo "Please specify the tar file to extract.\n"
		echo "E.g.: tar:extract sample_file.tgz"
	fi

# Compress file/folder using TAR with progress indicator
elif [ "$function" == "tar:compress" ]; then
	echo "Please enter the filename to save the .tgz file: "

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
		read filename

		if [ ! -z "$filename" -a "$filename" != " " ]; then
			printf "${GREEN}tar -czf${GRAY}: ${firstParameter}${GREEN}  | (pv -p --timer --rate --bytes > '${GRAY}${filename}${GREEN}'.tgz)\n\n${NC}"
			tar -czf - $firstParameter | (pv -p --timer --rate --bytes > "$filename".tgz)
		else
			"Please specify the file name"
		fi
	else
		echo "Please specify the folder or directory to compress."
		echo "E.g.: tar:compress foldername"
	fi

# Search and replace string on file
elif [ "$function" == "search:replace" ]; then
	echo "Please enter the string to search on the file:"

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
		read searchString

		if [ ! -z "$searchString" -a "$searchString" != " " ]; then

            echo "Please enter the string that will replace the search string:"
            read replaceString

            if [ ! -z "$replaceString" -a "$replaceString" != " " ]; then

                printf "${GREEN}LC_CTYPE=C sed -i 's#${GRAY}${searchString}${GREEN}#${GRAY}${replaceString}${GREEN}#g' ${GRAY}${firstParameter}\n\n${NC}"
		        LC_CTYPE=C sed -i 's#'"${searchString}"'#'"${replaceString}"'#g' $firstParameter

            else
			    "Please specify the string to replace"
		    fi

		else
			"Please specify the string to search"
		fi
	else
		echo "Please specify the file to perform the search and replace operation"
		echo "E.g.: search:replace /path/to/file.csv"
	fi

# TODO: Working on airplane mode (disable wi-fi and bluetooth)
elif [ "$function" == "airplane-mode:on" ]; then
	echo "Enabling airplane mode...\n"
	 # networksetup -setairportpower airport off
	 # networksetup -setairportpower en0 off
	 # networksetup -setairportpower en1 off
	 # launchctl unload -w /System/Library/LaunchDaemons/com.apple.blued.plist # Switch bluetooth off
elif [ "$function" == "airplane-mode:off" ]; then
	echo "Disabling airplane mode...\n"
	 # networksetup -setairportpower airport on
	 # networksetup -setairportpower en0 on
	 # networksetup -setairportpower en1 on
	 # launchctl load -wF /System/Library/LaunchDaemons/com.apple.blued.plist # Switch bluetooth on

#--------------------------------------------------------------------
# Search utilities
#--------------------------------------------------------------------
# Find files modified in the last N minutes
elif [ "$function" == "find:recent" ]; then
	echo "Searching for files modified in the last "$firstParameter" minutes..."
	printf "${GREEN}sudo find / -mmin ${GRAY}${firstParameter}${GREEN} -type f\n\n${NC}"
	sudo find / -mmin $firstParameter -type f

#--------------------------------------------------------------------
# Network utilities
#--------------------------------------------------------------------
# Internet connection speed test
elif [ "$function" == "speedtest" ]; then
	if [ ! -f /usr/local/lib/node_modules/speed-test/cli.js ]; then
		read -r -p "Do you want to install the Speed Test utility? (https://github.com/sindresorhus/speed-test) (Yes / No)" response
		case $response in
			[yY][eE][sS]|[yY])
				npm install --global speed-test
				;;
			*)
				exit
				;;
		esac
	else
		echo "Testing internet connection speed..."
		node "/usr/local/lib/node_modules/speed-test/cli.js"
	fi

# Run internet connection Speed Test each 5 minutes
elif [ "$function" == "speedtest:infinite" ]; then
	if [ ! -f /usr/local/lib/node_modules/speed-test/cli.js ]; then
		read -r -p "Do you want to install the Speed Test utility? (https://github.com/sindresorhus/speed-test) (Yes / No)" response
		case $response in
			[yY][eE][sS]|[yY])
				npm install --global speed-test
				;;
			*)
				exit
				;;
		esac
	else
		while true
		do
			title="\nTesting internet connection speed - "
			title+=`date '+%Y-%m-%d %H:%M:%S'`
			echo $title
			node "/usr/local/lib/node_modules/speed-test/cli.js"
			sleep 300
		done
	fi

# List of used ports
elif [ "$function" == "ports" ]; then
	echo "Getting list of used ports..."
	printf "${GREEN}sudo lsof -iTCP -sTCP:LISTEN -P\n\n${NC}"
	sudo lsof -iTCP -sTCP:LISTEN -P

# Get local IP address
elif [ "$function" == "ip:local" ]; then
	printf "${GREEN}ipconfig getifaddr en0\n\n${NC}"
	echo "Your IP address is:"
	ipconfig getifaddr en0

# Get public IP address
elif [ "$function" == "ip:public" ]; then
	printf "${GREEN}curl -s checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//'\n\n${NC}"
	curl -s checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//'

#--------------------------------------------------------------------
# LAMP (Linux, Apache, MySQL, PHP)
#--------------------------------------------------------------------

## MySQL utilities
elif [ "$function" == "mysql:gui" ]; then
	printf "${GREEN}open -a /Applications/Sequel\ Pro.app\n\n${NC}"
	open -a /Applications/Sequel\ Pro.app

elif [ "$function" == "mysql:cli" ]; then
	printf "${GREEN}$mysql --host=localhost ${GRAY}-u${mysql_user} -p${mysql_password}\n\n${NC}"
	$mysql --host=localhost -u$mysql_user -p$mysql_password

elif [ "$function" == "phpmyadmin" ]; then
	printf "${GREEN}open ${phpmyadmin}\n\n${NC}"
	open $phpmyadmin

# Export MySQL database
elif [ "$function" == "mysql:dump" ]; then
	echo "Please enter the filename to save the compressed database: "

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
		read filename

		if [ ! -z "$filename" -a "$filename" != " " ]; then
			printf "${GREEN}$mysql --host=localhost ${GRAY}-u${mysql_user} -p${mysql_password}${GREEN} | pv | gzip -c > ${GRAY}'${filename}'.sql.gz\n\n${NC}"
			$mysqldump -u"$mysql_user" -p"$mysql_password" $firstParameter | pv | gzip -c > "$filename".sql.gz
		else
			"Please specify the file name"
		fi
	else
		echo "Please specify the database to export"
		echo "E.g.: mysql:export database"
	fi

# List all MySQL databases
elif [ "$function" == "mysql:list" ]; then
    printf "${GREEN}echo 'show databases;' | ${mysql} ${GRAY} -u${mysql_user} -p${mysql_password} ${databasename}\n\n${NC}"
    echo "show databases;" | ${mysql} -u${mysql_user} -p${mysql_password}

# Import MySQL database
elif [ "$function" == "mysql:import" ]; then
	echo "Please enter the database name to import the selected SQL file: "

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
		read databasename

		if [ ! -z "$databasename" -a "$databasename" != " " ]; then
			printf "${GREEN}pv ${GRAY}${firstParameter}${GREEN} | ${mysql} ${GRAY} -u${mysql_user} -p${mysql_password} ${databasename}\n\n${NC}"
			pv $firstParameter | $mysql -u"$mysql_user" -p"$mysql_password" $databasename
		else
			"Please specify the database name"
		fi
	else
		echo "Please specify the SQL file to import"
		echo "E.g.: mysql:import /path/to/file.sql"
	fi

# Export all MySQL databases
elif [ "$function" == "mysql:dump-all" ]; then

    databases=`$mysql -u"$mysql_user" -p"$mysql_password" -e "SHOW DATABASES;" | tr -d "| " | grep -v Database`

    for db in $databases; do
        if [[ "$db" != "information_schema" ]] && [[ "$db" != "performance_schema" ]] && [[ "$db" != "mysql" ]] && [[ "$db" != _* ]] ; then
            echo "Dumping database: $db"
            $mysqldump -u"$mysql_user" -p"$mysql_password" --databases $db > `date +%Y%m%d`.$db.sql
        fi
    done

# Import single MySQL database table
elif [ "$function" == "mysql:import-table" ]; then
	echo "Please enter the name from the database containing the table to import: "

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
		read databasename

		if [ ! -z "$databasename" -a "$databasename" != " " ]; then
			printf "${GREEN}pv ${GRAY}${firstParameter}${GREEN} | ${mysql} ${GRAY} -u ${mysql_user} -D ${databasename}\n\n${NC}"
			pv $firstParameter | $mysql -u $mysql_user -p -D $databasename
		else
			"Please specify the database name"
		fi
	else
		echo "Please specify the SQL file containing the single table to import"
		echo "E.g.: mysql:import /path/to/file.sql"
	fi

# Create MySQL database
elif [ "$function" == "mysql:create" ]; then

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
        printf "${GREEN}echo 'create database ${GRAY}${firstParameter}'${GREEN} | ${mysql} ${GRAY} -u${mysql_user} -p${mysql_password} ${databasename}\n\n${NC}"
        echo "create database ${firstParameter}" | ${mysql} -u${mysql_user} -p${mysql_password}
	else
		echo "Please specify the name for the new database"
		echo "E.g.: mysql:create database-name"
	fi

# Remove MySQL database
elif [ "$function" == "mysql:drop" ]; then

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
        printf "${GREEN}echo 'drop database ${GRAY}${firstParameter}'${GREEN} | ${mysql} ${GRAY} -u${mysql_user} -p${mysql_password} ${databasename}\n\n${NC}"
        echo "drop database ${firstParameter}" | ${mysql} -u${mysql_user} -p${mysql_password}
	else
		echo "Please specify the name of the database to remove"
		echo "E.g.: mysql:drop database-name"
	fi

# Duplicate MySQL database
elif [ "$function" == "mysql:duplicate" ]; then

    echo "Please enter the name for new table: "

    if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
		read databasename

		if [ ! -z "$databasename" -a "$databasename" != " " ]; then
			printf "${GREEN}mac mysql:create ${GRAY}$databasename${GREEN} && $mysqldump -u${mysql_user} -p${mysql_password} ${GRAY}${firstParameter}${GREEN} | ${mysql} -u${mysql_user} -p${mysql_password} ${GRAY}${databasename}\n\n${NC}"
			mac mysql:create $databasename && $mysqldump -u${mysql_user} -p${mysql_password} $firstParameter | $mysql -u${mysql_user} -p${mysql_password} $databasename
		else
			"Please specify the database name"
		fi
	else
		echo "Please specify the name of the database to duplicate"
		echo "E.g.: mysql:remove database-name"
	fi

# Start MAMP Apache and MySQL
elif [ "$function" == "mamp:start" ]; then
    # Ask for password up-front
    sudo -v
    # Open MAMP
    open /Applications/MAMP\ PRO/MAMP\ PRO.app/
    # Start Apache
    sudo /Applications/MAMP/Library/bin/httpd -f "/Library/Application Support/appsolute/MAMP PRO/conf/httpd.conf" -k start
    # Start MySQL
    sh -c '/Applications/MAMP/Library/bin/mysqld_safe --defaults-file=/Applications/MAMP/tmp/mysql/my.cnf --port=3306 --socket=/Applications/MAMP/tmp/mysql/mysql.sock --user=gabriel --pid-file=/Applications/MAMP/tmp/mysql/mysql.pid --log-error=/Applications/MAMP/logs/mysql_error_log.err --tmpdir=/Applications/MAMP/tmp/mysql/tmpdir --datadir=/Library/Application\ Support/appsolute/MAMP\ PRO/db/mysql &'

# Start MAMP Apache and MySQL
elif [ "$function" == "mamp:stop" ]; then
    # Ask for password up-front
    sudo -v
    # Open MAMP
    open /Applications/MAMP\ PRO/MAMP\ PRO.app/
    # Stop Apache
    sudo /Applications/MAMP/Library/bin/httpd -f "/Library/Application Support/appsolute/MAMP PRO/conf/httpd.conf" -k stop
    # Stop MySQL
    sh -c '/Applications/MAMP/Library/bin/mysqladmin -u root -proot --socket=/Applications/MAMP/tmp/mysql/mysql.sock shutdown'

# Restart MAMP Apache and MySQL
elif [ "$function" == "mamp:restart" ]; then
    # Ask for password up-front
    sudo -v
    # Open MAMP
    open /Applications/MAMP\ PRO/MAMP\ PRO.app/
    # Stop Apache
    sudo /Applications/MAMP/Library/bin/httpd -f "/Library/Application Support/appsolute/MAMP PRO/conf/httpd.conf" -k stop
    # Stop MySQL
    sh -c '/Applications/MAMP/Library/bin/mysqladmin -u root -proot --socket=/Applications/MAMP/tmp/mysql/mysql.sock shutdown'
    # Start Apache
    sudo /Applications/MAMP/Library/bin/httpd -f "/Library/Application Support/appsolute/MAMP PRO/conf/httpd.conf" -k start
    # Start MySQL
    sh -c '/Applications/MAMP/Library/bin/mysqld_safe --defaults-file=/Applications/MAMP/tmp/mysql/my.cnf --port=3306 --socket=/Applications/MAMP/tmp/mysql/mysql.sock --user=gabriel --pid-file=/Applications/MAMP/tmp/mysql/mysql.pid --log-error=/Applications/MAMP/logs/mysql_error_log.err --tmpdir=/Applications/MAMP/tmp/mysql/tmpdir --datadir=/Library/Application\ Support/appsolute/MAMP\ PRO/db/mysql &'

# Download file through SSH on current folder
elif [ "$function" == "ssh:download-file" ]; then

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then

		echo "Please enter the server IP address or domain: "

		read ipaddress
		if [ ! -z "$ipaddress" -a "$ipaddress" != " " ]; then

			echo "Please enter username: "

			read username

			if [ ! -z "$username" -a "$username" != " " ]; then

				printf "${GREEN}scp ${GRAY}${username}@${ipaddress}:${firstparameter}${GREEN} .\n\n${NC}"
				scp $username@$ipaddress:$firstParameter .

			else
				"Please specify the username for the remote server"
			fi

		else
			"Please specify the server IP address or domain"
		fi

	else
		echo "Please specify the path to the file on the remote server to download"
		echo "E.g.: /home/sample/file.jpg"
	fi
	
# Download entire folder through SSH on current directory
elif [ "$function" == "ssh:download-folder" ]; then

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then

		echo "Please enter the server IP address or domain: "

		read ipaddress
		if [ ! -z "$ipaddress" -a "$ipaddress" != " " ]; then

			echo "Please enter username: "

			read username

			if [ ! -z "$username" -a "$username" != " " ]; then

				printf "${GREEN}scp -r ${GRAY}${username}@${ipaddress}:${firstparameter}${GREEN} .\n\n${NC}"
				scp -r $username@$ipaddress:$firstParameter .

			else
				"Please specify the username for the remote server"
			fi

		else
			"Please specify the server IP address or domain"
		fi

	else
		echo "Please specify the path to the folder on the remote server to download"
		echo "E.g.: /home/sample/folder/"
	fi



# Upload file to remote server through SSH
elif [ "$function" == "ssh:upload" ]; then

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then

		echo "Please enter the server IP address or domain: "

		read ipaddress

		if [ ! -z "$ipaddress" -a "$ipaddress" != " " ]; then

			echo "Please enter username: "

			read username

			if [ ! -z "$username" -a "$username" != " " ]; then

					echo "Please enter path on the remote server to upload the file: "

					read remotePath

					if [ ! -z "$remotePath" -a "$remotePath" != " " ]; then

						printf "${GREEN}scp ${GRAY}${firstParameter} ${username}@${ipaddress}:${remotePath}${GREEN}\n\n${NC}"
						scp $firstParameter $username@$ipaddress:$remotePath

					else
						"Please specify the path on the remote server to upload the file"
					fi

			else
				"Please specify the username for the remote server"
			fi

		else
			"Please specify the server IP address or domain"
		fi

	else
		echo "Please specify the path to the file to upload to the remote server"
		echo "E.g.: /user/example/documents/file.pdf"
	fi

# PHP utilities
elif [ "$function" == "php:syntax" ]; then
	printf "${GREEN}find . -name \*.php -exec php -l '{}' \;\n\n${NC}"
	echo "Checking PHP syntax for all files in current location...\n"
	find . -name \*.php -exec php -l "{}" \;

elif [ "$function" == "php:info" ]; then
	printf "${GREEN}$php -i\n\n${NC}"
	$php -i

# Get battery information
elif [ "$function" == "battery:status" ]; then
	printf "${GREEN}system_profiler SPPowerDataType | awk '/Full/ || /Remaining/ || /Cycle/ { printf }' | sed -e 's/[^:]*/Battery/' -e 's/ *R.*):./\//' -e 's/ *Cycle/ (mAh)     Cycle/'\n\n${NC}"
	system_profiler SPPowerDataType | awk '/Full/ || /Remaining/ || /Cycle/ { printf }' | sed -e 's/[^:]*/Battery/' -e 's/ *R.*):./\//' -e 's/ *Cycle/ (mAh)     Cycle/'
	
# Get OS X version information
elif [ "$function" == "info" ]; then
	printf "${GREEN}sw_versf \n\n${NC}"
	sw_versf
	
# Edit hosts file
elif [ "$function" == "hosts:edit" ]; then
	printf "${GREEN}sudo vi /private/etc/hosts \n\n${NC}"
	sudo vi /private/etc/hosts

# SSH key utilities
elif [ "$function" == "ssh-key:copy" ]; then
	printf "${GREEN}pbcopy < ~/.ssh/id_rsa.pub \n\n${NC}"
	pbcopy < ~/.ssh/id_rsa.pub

#--------------------------------------------------------------------
# Web Development utilities
#--------------------------------------------------------------------

elif [ "$function" == "monitor" ]; then

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
        printf "${GREEN}tail -f ${GRAY}${firstParameter}\n\n${NC}"
        tail -f $firstParameter
	else
		echo "Please specify the file to monitor"
		echo "E.g.: monitor /path/to/file.sql"
	fi

#--------------------------------------------------------------------
# Performance and maintenance utilities
#--------------------------------------------------------------------

# See memory usage sorted by memory consumption
elif [ "$function" == "memory" ]; then
	printf "${GREEN}top -o MEM \n\n${NC}"
	top -o MEM

# Empty trash
elif [ "$function" == "trash:empty" ]; then
	printf "${GREEN}sudo rm -rf ~/.Trash/* \n\n${NC}"
	sudo rm -rf ~/.Trash/*

# Calculate trash size
elif [ "$function" == "trash:size" ]; then
	printf "${GREEN}du -sh ~/.Trash/ \n\n${NC}"
	echo "Trash size: \n"
	du -sh ~/.Trash/

# Remove all files and directories from Desktop directory
elif [ "$function" == "desktop:cleanup" ]; then
	printf "${GREEN}du -sh ~/.Trash/ \n\n${NC}"
	echo "These are the files and directories that are currently located on Desktop: \n"
	ls -lat ~/Desktop/
	echo "\n=============================================\n"
	read -r -p "Do you want to remove all the content from the Desktop directory? (Yes / No)" response
    case $response in
        [yY][eE][sS]|[yY])
            rm -rf ~/Desktop/*
            ;;
        *)
            exit
            ;;
    esac

# Remove all files and directories from Downloads directory
elif [ "$function" == "downloads:cleanup" ]; then
	printf "${GREEN}du -sh ~/.Trash/ \n\n${NC}"
	echo "These are the files and directories that are currently located on Downloads: \n"
	ls -lat ~/Downloads/
	echo "\n=============================================\n"
	read -r -p "Do you want to remove all the content from the Downloads directory? (Yes / No)" response
    case $response in
        [yY][eE][sS]|[yY])
            rm -rf ~/Downloads/*
            ;;
        *)
            exit
            ;;
    esac

#--------------------------------------------------------------------
# iTerm utilities
#--------------------------------------------------------------------

# Set title to current iTerm tab
elif [ "$function" == "iterm:tab-title" ]; then
    printf "${GREEN}echo -ne '\033]0;'${GRAY}${firstparameter}${GREEN}'\007'\n\n${NC}"
	echo -ne '\033]0;'$allParameters'\007'
	echo "Tab title updated"

#--------------------------------------------------------------------
# GIT utilities
#--------------------------------------------------------------------

# Display local Git configuration
elif [ "$function" == "git:config" ]; then
    printf "${GREEN}git config --list\n\n${NC}"
	git config --list

# Open current Git repository on Github
elif [ "$function" == "git:open" ]; then
	giturl=$(git config --get remote.origin.url)
      if [ "$giturl" == "" ]
        then
         echo "Not a git repository or no remote.origin.url set"
         exit 1;
      fi

      giturl=${giturl/git\@github\.com\:/https://github.com/}
      giturl=${giturl/\.git/\/}
      branch="$(git symbolic-ref HEAD 2>/dev/null)" ||
      branch="(unnamed branch)"     # detached HEAD
      branch=${branch##refs/heads/}
      giturl=$giturl
      open $giturl

# Create GIT branch based on current branch
elif [ "$function" == "git:create-branch" ]; then

    if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
        printf "${GREEN}git checkout -b ${GRAY}$firstParameter\n\n${NC}"
	    git checkout -b $firstParameter

    else
        echo "Please specify the name for the new branch"
        echo "E.g.: git:create-branch sample-branch"
    fi

# Get last update date for all branches in current project
elif [ "$function" == "git:fresh" ]; then
	get_branch_data |
	  sort -k 1gr |
	  sed "s:^\([0-9]*|\)\(.*\):\2:" |
	  sed -e '1 i\' -e '1 i\
		Branch name|Last commit dated' -e '1 i\
		-----------|-----------------' |
	  column -t -s '|'

# Undo latest commit
elif [ "$function" == "git:undo-commit" ]; then
    printf "${GREEN}git reset --soft HEAD~\n\n${NC}"
	git reset --soft HEAD~

# See latest commits IDs and titles for current branch
elif [ "$function" == "git:log" ]; then
	git log --pretty=oneline

# See all branches
elif [ "$function" == "git:branch" ]; then
	git branch -a

# Check GIT settings
elif [ "$function" == "git:settings" ]; then
	git config --list
	
# Remove GIT from current project
elif [ "$function" == "git:remove" ]; then
	find . -name '.git' -exec rm -rf {} \;

# Open current GIT repository URL
elif [ "$function" == "git:open" ]; then
	open `git remote -v | awk '/fetch/{print $2}' | sed -Ee 's#(git@|git://)#http://#' -e 's@com:@com/@'`| head -n1


#--------------------------------------------------------------------
# Web utilities
#--------------------------------------------------------------------

# Download all images from website to current directory
elif [ "$function" == "web:download-images" ]; then

    if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
        printf "${GREEN}wget -r -l 1 -A jpeg,jpg,bmp,gif,png ${GRAY}${firstParameter}'\n\n${NC}"
        wget -r -l 1 -A jpeg,jpg,bmp,gif,png ${firstParameter}
        # Remove empty subdirectories
        find . -type d -empty -delete

    else
        echo "Please specify the full URL of the website to download the images"
        echo "E.g.: web:download-images http://example.com/sample-page"
    fi

#--------------------------------------------------------------------
# Homebrew utilities
#--------------------------------------------------------------------

# Get list of installed Homebrew packages
elif [ "$function" == "brew:list" ]; then
	brew list

#--------------------------------------------------------------------
# Development utilities
#--------------------------------------------------------------------

# TODO: Optimize all images in directory (recursive)

#--------------------------------------------------------------------
# XCode utilities
#--------------------------------------------------------------------

elif [ "$function" == "magento:version" ]; then
    printf "${GREEN}php -r 'require 'app/Mage.php'; echo 'Magento version: ' . Mage::getVersion();'\n\n${NC}"
    php -r "require 'app/Mage.php'; echo 'Magento version: ' . Mage::getVersion();"

#--------------------------------------------------------------------
# XCode utilities
#--------------------------------------------------------------------

elif [ "$function" == "xcode:cleanup" ]; then

	echo "========== Cleanup start =========="

	# define paths
	archivesPath="/Library/Developer/Xcode/Archives"
	derivedDataPath="/Library/Developer/Xcode/DerivedData"
	oldDeviceInfoPath="/Library/Developer/Xcode/iOS DeviceSupport"
	simulatorApplicationRootPath="/Library/Application Support/iPhone Simulator/"
	USER_HOME=$(eval echo ~${SUDO_USER})

	paths=( "$archivesPath" "$derivedDataPath" "$oldDeviceInfoPath" )
	msgs=( "Archives" "DerivedData" "Old device information" )
	pathsLength=${#paths[@]}

	# Clean up developer folder
	# loop through predefined paths
	for (( i=0; i<${pathsLength}; i++ ));
	do
	  CMD="sudo rm -rf "$USER_HOME${paths[$i]}"/*"
	  $CMD
	  echo ${msgs[$i]}" cleared"
	done

	# Clean up iOS Simulator
	ignoreFolders=("Applications" "Containers" "Library" "Root" "User" "tmpspace")
	versionMarker="."

	rootPathIdx=$((${#USER_HOME} + ${#simulatorApplicationRootPath}))
	for folderPath in "$USER_HOME$simulatorApplicationRootPath"*
	do
		length=${#folderPath}
		folderName=${folderPath:$rootPathIdx:$((length - rootPathIdx))}

		# Find folder in ~/Library/Application Support/iPhone Simulator/ with "." (assuming it is simulator version) and not in ignored list
		if [[ "${ignoreFolders[*]}" != *$folderName* && $folderName == *$versionMarker* ]]; then

			# Check if Applications folder exists
			if [ -d "$folderPath/Applications" ]; then
				echo 'iOS Simulator version '$folderName' with applications installed, now cleared'
				tmpFolderPath="${folderPath// /*}"
				CMD="sudo rm -rf "$tmpFolderPath"/Applications"
				$CMD
			fi

			# Check if tmp folder exists
			if [ -d "$folderPath/tmp" ]; then

				# Check tmp files in folder with special prefixs (say ghostlyIcons.xqwj3qwb2)
				tmpFolderPath="${folderPath// /*}"
				hasTmpFiles=false
				for ext in "ghostlyIcons" "gridImages" "iconImages" "iconLabels_gray"
				do
					fileCheckPath="$tmpFolderPath/tmp/$ext.*"
					if (ls $fileCheckPath > /dev/null 2>&1)
					then
					  CMD="sudo rm -rf "$tmpFolderPath"/tmp/$ext.*"
					  $CMD
					  hasTmpFiles=true
					fi
				done

				if ($hasTmpFiles); then
					echo 'iOS Simulator version '$folderName' tmp files cleared'
				fi
			fi
		fi

	done

	echo "========== Cleanup ended =========="
	echo "Suggest you to restart your xcode"
	echo "========== Have a nice day =========="

#--------------------------------------------------------------------
# Online search utilities
#--------------------------------------------------------------------

# TODO: Add "Feeling Lucky" Google Search with parameters to quickly access first result

# TODO: Add Google Search with parameters

#--------------------------------------------------------------------
# Executable apps
#--------------------------------------------------------------------
elif [ "$function" == "firefox" ]; then
	open -a Firefox
elif [ "$function" == "chrome" ]; then
	open -a Google\ Chrome
elif [ "$function" == "safari" ]; then
	open -a Safari
elif [ "$function" == "phpstorm" ]; then
	open -a PHPStorm
elif [ "$function" == "atom" ]; then
	open -a Atom
elif [ "$function" == "xcode" ]; then
	open -a XCode
elif [ "$function" == "mamp" ]; then
	open -a MAMP
elif [ "$function" == "filezilla" ]; then
	open -a Filezilla
elif [ "$function" == "skype" ]; then
	open -a Skype
elif [ "$function" == "gotomeeting" ]; then
	open -a GoToMeeting
elif [ "$function" == "snippetslab" ]; then
	open -a SnippetsLab
elif [ "$function" == "preview" ]; then
	open -a Preview
elif [ "$function" == "photoshop" ]; then
	open -a Adobe\ Photoshop\ CC\ 2015
elif [ "$function" == "textedit" ]; then
	open -a TextEdit
elif [ "$function" == "sourcetree" ]; then
	open -a SourceTree
elif [ "$function" == "stree" ]; then
	open -a SourceTree ./
elif [ "$function" == "quiver" ]; then
	open -a Quiver
elif [ "$function" == "virtualbox" ]; then
	open -a VirtualBox
elif [ "$function" == "pixelmator" ]; then
	open -a Pixelmator
elif [ "$function" == "vlc" ]; then
	open -a VLC
elif [ "$function" == "kaleidoscope" ]; then
	open -a Kaleidoscope
elif [ "$function" == "mindnode" ]; then
	open -a MindNode
elif [ "$function" == "paw" ]; then
	open -a Paw
elif [ "$function" == "appstore" ]; then
	open -a App\ Store
elif [ "$function" == "goodtask" ]; then
	open -a GoodTask
elif [ "$function" == "notes" ]; then
	open -a Notes

else
	echo "\nCommand not found: "
	echo "$function"
	echo "\nParameters: "
	echo "$allParameters"
fi
