#!/bin/sh
#####################################################################
# mac - automation command line tools for OS X
#####################################################################
# Version: 0.1
# Date: December 8, 2015
# Author: Gabriel Guarino
#
# Notes: Collection of useful functions to automate OS X common
# tasks
#
#####################################################################

#--------------------------------------------------------------------
# Clear the screen for a clean output
#--------------------------------------------------------------------
clear

#--------------------------------------------------------------------
# Variables
#--------------------------------------------------------------------
function=$1
firstParameter=$2
secondParameter=$3
allParameters=${@:2}

#--------------------------------------------------------------------
# Functions
#--------------------------------------------------------------------
function get_branch_data()
{
  (
    for b in `git branch | sed 's:^[ *]*::'`; do
        git log -n 1 $b  --pretty="format:%ct|%ci" -- |
          sed "s^\(.*\)|\(.*\)$^\1|${b}|\2^"
    done
  )
}

#--------------------------------------------------------------------
# General functions
#--------------------------------------------------------------------
if [ "$function" == "restart" ]; then
	echo "Restarting Mac in 3 seconds..."
	sleep 3s
	sudo shutdown -r now
elif [ "$function" == "sleep" ]; then
	pmset sleepnow
elif [ "$function" == "shutdown" ]; then
	sudo shutdown -h now

# Calculate folder size
elif [ "$function" == "folder:size" ]; then
	echo "Calculating folder size...\n"
	echo "Folder size:"
	du -sh .

# Close all opened apps
elif [ "$function" = "apps:close-all" ]; then
	# To customize ignored apps, just put the keywords in $ignore
	# To test which apps you are going to kill, run:
	# ps aux | grep /Applications | grep -v $ignore | sed "s/\ *\ /\ /g" | cut -d ' ' -f 11 | xargs -I X echo X
	ignore="grep\|iTerm\|Finder\|Dropbox\|Bartender"
	ps aux | grep /Applications | grep -v $ignore | sed "s/\ *\ /\ /g" | cut -d ' ' -f 2 | xargs -I X kill -9 X

# Get list of installed apps from the App Store
elif [ "$function" == "apps:appstore" ]; then
	echo "Getting list of installed apps from the App Store...\n"
	find /Applications -path '*Contents/_MASReceipt/receipt' -maxdepth 4 -print |\sed 's#.app/Contents/_MASReceipt/receipt#.app#g; s#/Applications/##'

# Start screensaver
elif [ "$function" == "screensaver" ]; then
	open -a /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app

# Eject all mounted volumes and disk
elif [ "$function" == "eject-all" ]; then
	osascript -e 'tell application "Finder" to eject (every disk whose ejectable is true)'

# Update OS X software updates, update installed Ruby gems, Homebrew, npm and their installed packages
elif [ "$function" == "update" ]; then
	echo "Updating OS X...\n"
	sudo softwareupdate -i -a;
	echo "Updating Homebrew and its installed packages...\n"
	brew update; brew upgrade --all; brew cleanup;
	echo "Updating npm and its installed packages...\n"
	npm install npm -g; npm update -g;
	echo "Updating installed Ruby gems...\n"
	sudo gem update --system; sudo gem update
	echo "Your system has been successfully updated"

# TODO: Working on airplane mode (disable wi-fi and bluetooth)
elif [ "$function" == "airplane-mode:on" ]; then
	echo "Enabling airplane mode...\n"
	 # networksetup -setairportpower airport off
	 # networksetup -setairportpower en0 off
	 # networksetup -setairportpower en1 off
	 # launchctl unload -w /System/Library/LaunchDaemons/com.apple.blued.plist # Switch bluetooth off
elif [ "$function" == "airplane-mode:off" ]; then
	echo "Disabling airplane mode...\n"
	 # networksetup -setairportpower airport on
	 # networksetup -setairportpower en0 on
	 # networksetup -setairportpower en1 on
	 # launchctl load -wF /System/Library/LaunchDaemons/com.apple.blued.plist # Switch bluetooth on

#--------------------------------------------------------------------
# Network utilities
#--------------------------------------------------------------------
# Internet connection speed test
elif [ "$function" == "speedtest" ]; then
	if [ ! -f /usr/local/lib/node_modules/speed-test/cli.js ]; then
		read -r -p "Do you want to install the Speed Test utility? (https://github.com/sindresorhus/speed-test) (Yes / No)" response
		case $response in
			[yY][eE][sS]|[yY])
				npm install --global speed-test
				;;
			*)
				exit
				;;
		esac
	else
		echo "Testing internet connection speed..."
		node "/usr/local/lib/node_modules/speed-test/cli.js"
	fi

# Run internet connection Speed Test each 5 minutes
elif [ "$function" == "speedtest:infinite" ]; then
	if [ ! -f /usr/local/lib/node_modules/speed-test/cli.js ]; then
		read -r -p "Do you want to install the Speed Test utility? (https://github.com/sindresorhus/speed-test) (Yes / No)" response
		case $response in
			[yY][eE][sS]|[yY])
				npm install --global speed-test
				;;
			*)
				exit
				;;
		esac
	else
		while true
		do
			title="\nTesting internet connection speed - "
			title+=`date '+%Y-%m-%d %H:%M:%S'`
			echo $title
			node "/usr/local/lib/node_modules/speed-test/cli.js"
			sleep 300
		done
	fi

# List of used ports
elif [ "$function" == "ports" ]; then
	echo "Getting list of usd ports..."
	sudo lsof -iTCP -sTCP:LISTEN -P

#--------------------------------------------------------------------
# Executable apps
#--------------------------------------------------------------------
elif [ "$function" == "firefox" ]; then
	open -a Firefox
elif [ "$function" == "chrome" ]; then
	open -a Google\ Chrome
elif [ "$function" == "safari" ]; then
	open -a Safari
elif [ "$function" == "phpstorm" ]; then
	open -a PHPStorm
elif [ "$function" == "xcode" ]; then
	open -a XCode
elif [ "$function" == "mamp" ]; then
	open -a MAMP
elif [ "$function" == "filezilla" ]; then
	open -a Filezilla
elif [ "$function" == "skype" ]; then
	open -a Skype
elif [ "$function" == "gotomeeting" ]; then
	open -a GoToMeeting
elif [ "$function" == "snippetslab" ]; then
	open -a SnippetsLab
elif [ "$function" == "preview" ]; then
	open -a Preview
elif [ "$function" == "photoshop" ]; then
	open -a Adobe\ Photoshop\ CC\ 2015
elif [ "$function" == "textedit" ]; then
	open -a TextEdit
elif [ "$function" == "sourcetree" ]; then
	open -a SourceTree
elif [ "$function" == "stree" ]; then
	open -a SourceTree ./
elif [ "$function" == "quiver" ]; then
	open -a Quiver
elif [ "$function" == "virtualbox" ]; then
	open -a VirtualBox
elif [ "$function" == "pixelmator" ]; then
	open -a Pixelmator
elif [ "$function" == "vlc" ]; then
	open -a VLC
elif [ "$function" == "kaleidoscope" ]; then
	open -a Kaleidoscope
elif [ "$function" == "mindnode" ]; then
	open -a MindNode
elif [ "$function" == "paw" ]; then
	open -a Paw
elif [ "$function" == "appstore" ]; then
	open -a App\ Store
elif [ "$function" == "goodtask" ]; then
	open -a GoodTask
elif [ "$function" == "notes" ]; then
	open -a Transparent\ Note

#--------------------------------------------------------------------
# LAMP (Linux, Apache, MySQL, PHP)
#--------------------------------------------------------------------

# MySQL utilities
elif [ "$function" == "mysql" ]; then
	open -a MySQL
elif [ "$function" == "mysql-cli" ]; then
	/Applications/MAMP/Library/bin/mysql --host=localhost -uroot -proot

# PHP utilities
elif [ "$function" == "php:syntax" ]; then
	echo "Checking PHP syntax for all files in current location...\n"
	find . -name \*.php -exec php -l "{}" \;

# Edit hosts file
elif [ "$function" == "hosts" ]; then
	sudo vi /private/etc/hosts

# SSH key utilities
elif [ "$function" == "ssh-key:copy" ]; then
	pbcopy < ~/.ssh/id_rsa.pub

#--------------------------------------------------------------------
# Performance and maintenance utilities
#--------------------------------------------------------------------

# See memory usage ordered by memory consumption
elif [ "$function" == "memory" ]; then
	top -o MEM

# Empty trash
elif [ "$function" == "trash:empty" ]; then
	sudo rm -rf ~/.Trash/*

# Calculate trash size
elif [ "$function" == "trash:size" ]; then
	echo "Trash size: \n"
	du -sh ~/.Trash/

#--------------------------------------------------------------------
# iTerm utilities
#--------------------------------------------------------------------

# Set title to current tab
elif [ "$function" == "tab:title" ]; then
	echo -ne "\033]0;"$allParameters"\007"
	echo "Tab title updated"

#--------------------------------------------------------------------
# GIT utilities
#--------------------------------------------------------------------

# Get last update date for all branches in current project
elif [ "$function" == "git:fresh" ]; then
	get_branch_data |
	  sort -k 1gr |
	  sed "s:^\([0-9]*|\)\(.*\):\2:" |
	  sed -e '1 i\' -e '1 i\
		Branch name|Last commit dated' -e '1 i\
		-----------|-----------------' |
	  column -t -s '|'

#--------------------------------------------------------------------
# XCode utilities
#--------------------------------------------------------------------

elif [ "$function" == "xcode:cleanup" ]; then

	echo "========== Cleanup start =========="

	# define paths
	archivesPath="/Library/Developer/Xcode/Archives"
	derivedDataPath="/Library/Developer/Xcode/DerivedData"
	oldDeviceInfoPath="/Library/Developer/Xcode/iOS DeviceSupport"
	simulatorApplicationRootPath="/Library/Application Support/iPhone Simulator/"
	USER_HOME=$(eval echo ~${SUDO_USER})

	paths=( "$archivesPath" "$derivedDataPath" "$oldDeviceInfoPath" )
	msgs=( "Archives" "DerivedData" "Old device information" )
	pathsLength=${#paths[@]}

	# Clean up developer folder
	# loop through predefined paths
	for (( i=0; i<${pathsLength}; i++ ));
	do
	  CMD="sudo rm -rf "$USER_HOME${paths[$i]}"/*"
	  $CMD
	  echo ${msgs[$i]}" cleared"
	done

	# Clean up iOS Simulator
	ignoreFolders=("Applications" "Containers" "Library" "Root" "User" "tmpspace")
	versionMarker="."

	rootPathIdx=$((${#USER_HOME} + ${#simulatorApplicationRootPath}))
	for folderPath in "$USER_HOME$simulatorApplicationRootPath"*
	do
		length=${#folderPath}
		folderName=${folderPath:$rootPathIdx:$((length - rootPathIdx))}

		# Find folder in ~/Library/Application Support/iPhone Simulator/ with "." (assuming it is simulator version) and not in ignored list
		if [[ "${ignoreFolders[*]}" != *$folderName* && $folderName == *$versionMarker* ]]; then

			# Check if Applications folder exists
			if [ -d "$folderPath/Applications" ]; then
				echo 'iOS Simulator version '$folderName' with applications installed, now cleared'
				tmpFolderPath="${folderPath// /*}"
				CMD="sudo rm -rf "$tmpFolderPath"/Applications"
				$CMD
			fi

			# Check if tmp folder exists
			if [ -d "$folderPath/tmp" ]; then

				# Check tmp files in folder with special prefixs (say ghostlyIcons.xqwj3qwb2)
				tmpFolderPath="${folderPath// /*}"
				hasTmpFiles=false
				for ext in "ghostlyIcons" "gridImages" "iconImages" "iconLabels_gray"
				do
					fileCheckPath="$tmpFolderPath/tmp/$ext.*"
					if (ls $fileCheckPath > /dev/null 2>&1)
					then
					  CMD="sudo rm -rf "$tmpFolderPath"/tmp/$ext.*"
					  $CMD
					  hasTmpFiles=true
					fi
				done

				if ($hasTmpFiles); then
					echo 'iOS Simulator version '$folderName' tmp files cleared'
				fi
			fi
		fi

	done

	echo "========== Cleanup ended =========="
	echo "Suggest you to restart your xcode"
	echo "========== Have a nice day =========="

#--------------------------------------------------------------------
# Online search utilities
#--------------------------------------------------------------------

# TODO: Add "Feeling Lucky" Google Search with parameters to quickly access first result

# TODO: Add Google Search with parameters

else
	echo "\nCommand not found: "
	echo "$function"
	echo "\nParameters: "
	echo "$allParameters"
fi
