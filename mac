#!/bin/sh
#####################################################################
# mac - automation command line tools for OS X
#####################################################################
# Version: 0.1
# Date: December 8, 2015
# Author: Gabriel Guarino
#
# Notes: Collection of useful functions to automate OS X common
# tasks
#
#####################################################################

#--------------------------------------------------------------------
# Global Variables
#--------------------------------------------------------------------
mysql="/Applications/MAMP/Library/bin/mysql"
mysql_app="MySQL"
mysql_user="root"
mysql_password="root"
mysqldump="/Applications/MAMP/Library/bin/mysqldump"

#--------------------------------------------------------------------
# Parameters
#--------------------------------------------------------------------
function=$1
firstParameter=$2
secondParameter=$3
allParameters=${@:2}

#--------------------------------------------------------------------
# Colors
#--------------------------------------------------------------------
GREEN='\033[0;32m'
GRAY='\033[0;37m'
NC='\033[0m' # No Color

#--------------------------------------------------------------------
# Functions
#--------------------------------------------------------------------
function get_branch_data()
{
  (
    for b in `git branch | sed 's:^[ *]*::'`; do
        git log -n 1 $b  --pretty="format:%ct|%ci" -- |
          sed "s^\(.*\)|\(.*\)$^\1|${b}|\2^"
    done
  )
}

#--------------------------------------------------------------------
# General functions
#--------------------------------------------------------------------
if [ "$function" == "restart" ]; then
	printf "${GREEN}sudo shutdown -r now\n\n${NC}"
	echo "Restarting Mac in 3 seconds..."
	sleep 3s
	sudo shutdown -r now
elif [ "$function" == "sleep" ]; then
	printf "${GREEN}pmset sleepnow\n\n${NC}"
	pmset sleepnow
elif [ "$function" == "shutdown" ]; then
	printf "${GREEN}sudo shutdown -h now\n\n${NC}"
	sudo shutdown -h now

# Remove files older than X days in current folder
elif [ "$function" == "files:remove-older" ]; then
	printf "${GREEN}find . -ctime +${GRAY}${firstParameter}${GREEN} -print0 | xargs -0 -n1\n\n${NC}"
	echo "Removing files older than "$firstParameter" days..."
	find . -ctime +$firstParameter -print0 | xargs -0 -n1

# Calculate folder size
elif [ "$function" == "folder:size" ]; then
	printf "${GREEN}du -sh .\n\n${NC}"
	echo "Calculating folder size...\n"
	echo "Folder size:"
	du -sh .

# List folders in current directory
elif [ "$function" == "folders" ]; then
	printf "${GREEN}ls -d */\n\n${NC}"
	ls -d */

# Remove empty subdirectories
elif [ "$function" == "folders:remove-empty" ]; then
	printf "${GREEN}find . -type d -empty -delete\n\n${NC}"
	find . -type d -empty -delete

# Close all opened apps
elif [ "$function" = "apps:close-all" ]; then
	printf "${GREEN}ignore='grep\|iTerm\|Finder\|Dropbox\|Bartender'\n${NC}"
	printf "${GREEN}ps aux | grep /Applications | grep -v $ignore | sed "s/\ *\ /\ /g" | cut -d ' ' -f 2 | xargs -I X kill -9 X\n\n${NC}"
	# To customize ignored apps, just put the keywords in $ignore
	# To test which apps you are going to kill, run:
	# ps aux | grep /Applications | grep -v $ignore | sed "s/\ *\ /\ /g" | cut -d ' ' -f 11 | xargs -I X echo X
	ignore="grep\|iTerm\|Finder\|Dropbox\|Bartender"
	ps aux | grep /Applications | grep -v $ignore | sed "s/\ *\ /\ /g" | cut -d ' ' -f 2 | xargs -I X kill -9 X

# Get list of installed apps from the App Store
elif [ "$function" == "apps:app-store" ]; then
	printf "${GREEN}find /Applications -path '*Contents/_MASReceipt/receipt' -maxdepth 4 -print |\sed 's#.app/Contents/_MASReceipt/receipt#.app#g; s#/Applications/##'\n\n${NC}"
	echo "Getting list of installed apps from the App Store...\n"
	find /Applications -path '*Contents/_MASReceipt/receipt' -maxdepth 4 -print |\sed 's#.app/Contents/_MASReceipt/receipt#.app#g; s#/Applications/##'

# Start screensaver
elif [ "$function" == "screensaver" ]; then
	printf "${GREEN}open -a /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app\n\n${NC}"
	open -a /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app

# Eject all mounted volumes and disk
elif [ "$function" == "eject-all" ]; then
	printf "${GREEN}osascript -e 'tell application 'Finder' to eject (every disk whose executable is true)'\n\n${NC}"
	osascript -e 'tell application "Finder" to eject (every disk whose executable is true)'

# Get battery information
elif [ "$function" == "battery:info" ]; then
	printf "${GREEN}system_profiler SPPowerDataType | awk '/Full/ || /Remaining/ || /Cycle/ { printf }' | sed -e 's/[^:]*/Battery/' -e 's/ *R.*):./\//' -e 's/ *Cycle/ (mAh)     Cycle/'\n\n${NC}"
	system_profiler SPPowerDataType | awk '/Full/ || /Remaining/ || /Cycle/ { printf }' | sed -e 's/[^:]*/Battery/' -e 's/ *R.*):./\//' -e 's/ *Cycle/ (mAh)     Cycle/'

# Compress file/folder using TAR with progress indicator
elif [ "$function" == "tar:compress" ]; then
	echo "Please enter the filename to save the .tgz file: "

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
		read filename

		if [ ! -z "$filename" -a "$filename" != " " ]; then
			printf "${GREEN}tar -czf - ${GRAY}${firstParameter}${GREEN}  | (pv -p --timer --rate --bytes > '${GRAY}${filename}${GREEN}'.tgz)\n\n${NC}"
			tar -czf - $firstParameter | (pv -p --timer --rate --bytes > "$filename".tgz)
		else
			"Please specify the file name"
		fi
	else
		echo "Please specify the folder or directory to compress."
		echo "E.g.: tar:compress foldername"
	fi

# Install OS X software updates, update installed Ruby gems, Homebrew, npm and their installed packages
elif [ "$function" == "update" ]; then
	printf "${GREEN}sudo softwareupdate -i -a;\n\n${NC}"
	echo "Updating OS X...\n"
	sudo softwareupdate -i -a;
	printf "${GREEN}brew update; brew upgrade --all; brew cleanup;\n\n${NC}"
	echo "Updating Homebrew and its installed packages...\n"
	brew update; brew upgrade --all; brew cleanup;
	printf "${GREEN}npm install npm -g; npm update -g;\n\n${NC}"
	echo "Updating npm and its installed packages...\n"
	npm install npm -g; npm update -g;
	printf "${GREEN}sudo gem update --system; sudo gem update\n\n${NC}"
	echo "Updating installed Ruby gems...\n"
	sudo gem update --system; sudo gem update
	echo "Your system has been successfully updated"

# Find text in current directory
elif [ "$function" == "search:text" ]; then

	if [ ! -z "$allParameters" -a "$allParameters" != " " ]; then
		printf "${GREEN}find . -type f -exec grep -i '${GRAY}${firstParameter}${GREEN}' {} \; -print\n\n${NC}"
		echo "Recursively find '"$allParameters"' inside directory...\n"
		find . -type f -exec grep -i "$allParameters" {} \; -print
	else
		echo "Please introduce text to search. E.g:\n"
		echo "mac find:text Sample Search Text"
	fi

# Extract Zip file
elif [ "$function" == "zip:extract" ]; then

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
		printf "${GREEN}unzip ${GRAY}${firstParameter}\n\n${NC}"
		unzip $firstParameter
	else
		echo "Please specify the Zip file to extract.\n"
		echo "E.g.: zip:extract sample_file.zip"
	fi

# Extract Gzip file
elif [ "$function" == "gzip:extract" ]; then

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
		printf "${GREEN}gzip -d ${GRAY}${firstParameter}\n\n${NC}"
		gzip -d $firstParameter
	else
		echo "Please specify the Gzip file to extract.\n"
		echo "E.g.: gzip:extract sample_file.gz"
	fi

# Extract tar file
elif [ "$function" == "tar:extract" ]; then

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
		printf "${GREEN}tar -xvzf ${GRAY}${firstParameter}\n\n${NC}"
		tar -xvzf $firstParameter
	else
		echo "Please specify the tar file to extract.\n"
		echo "E.g.: tar:extract sample_file.tgz"
	fi

# TODO: Working on airplane mode (disable wi-fi and bluetooth)
elif [ "$function" == "airplane-mode:on" ]; then
	echo "Enabling airplane mode...\n"
	 # networksetup -setairportpower airport off
	 # networksetup -setairportpower en0 off
	 # networksetup -setairportpower en1 off
	 # launchctl unload -w /System/Library/LaunchDaemons/com.apple.blued.plist # Switch bluetooth off
elif [ "$function" == "airplane-mode:off" ]; then
	echo "Disabling airplane mode...\n"
	 # networksetup -setairportpower airport on
	 # networksetup -setairportpower en0 on
	 # networksetup -setairportpower en1 on
	 # launchctl load -wF /System/Library/LaunchDaemons/com.apple.blued.plist # Switch bluetooth on

#--------------------------------------------------------------------
# Search utilities
#--------------------------------------------------------------------
# Find files modified in the last N minutes
elif [ "$function" == "find:recent" ]; then
	echo "Searching for files modified in the last "$firstParameter" minutes..."
	printf "${GREEN}sudo find / -mmin ${GRAY}${firstParameter}${GREEN} -type f\n\n${NC}"
	sudo find / -mmin $firstParameter -type f

#--------------------------------------------------------------------
# Network utilities
#--------------------------------------------------------------------
# Internet connection speed test
elif [ "$function" == "speedtest" ]; then
	if [ ! -f /usr/local/lib/node_modules/speed-test/cli.js ]; then
		read -r -p "Do you want to install the Speed Test utility? (https://github.com/sindresorhus/speed-test) (Yes / No)" response
		case $response in
			[yY][eE][sS]|[yY])
				npm install --global speed-test
				;;
			*)
				exit
				;;
		esac
	else
		echo "Testing internet connection speed..."
		node "/usr/local/lib/node_modules/speed-test/cli.js"
	fi

# Run internet connection Speed Test each 5 minutes
elif [ "$function" == "speedtest:infinite" ]; then
	if [ ! -f /usr/local/lib/node_modules/speed-test/cli.js ]; then
		read -r -p "Do you want to install the Speed Test utility? (https://github.com/sindresorhus/speed-test) (Yes / No)" response
		case $response in
			[yY][eE][sS]|[yY])
				npm install --global speed-test
				;;
			*)
				exit
				;;
		esac
	else
		while true
		do
			title="\nTesting internet connection speed - "
			title+=`date '+%Y-%m-%d %H:%M:%S'`
			echo $title
			node "/usr/local/lib/node_modules/speed-test/cli.js"
			sleep 300
		done
	fi

# List of used ports
elif [ "$function" == "ports" ]; then
	echo "Getting list of usd ports..."
	printf "${GREEN}sudo lsof -iTCP -sTCP:LISTEN -P\n\n${NC}"
	sudo lsof -iTCP -sTCP:LISTEN -P

# Get local IP address
elif [ "$function" == "ip" ]; then
	printf "${GREEN}ipconfig getifaddr en0\n\n${NC}"
	echo "Your IP address is:"
	ipconfig getifaddr en0

#--------------------------------------------------------------------
# LAMP (Linux, Apache, MySQL, PHP)
#--------------------------------------------------------------------

## MySQL utilities
elif [ "$function" == "mysql" ]; then
	printf "${GREEN}open -a $mysql_app\n\n${NC}"
	open -a $mysql_app
elif [ "$function" == "mysql-cli" ]; then
	printf "${GREEN}$mysql --host=localhost ${GRAY}-u${mysql_user} -p${mysql_password}\n\n${NC}"
	$mysql --host=localhost -u$mysql_user -p$mysql_password

# Export MySQL database
elif [ "$function" == "mysql:export" ]; then
	echo "Please enter the filename to save the compressed database: "

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
		read filename

		if [ ! -z "$filename" -a "$filename" != " " ]; then
			printf "${GREEN}$mysql --host=localhost ${GRAY}-u${mysql_user} -p${mysql_password}${GREEN} | pv | gzip -c > ${GRAY}'${filename}'.sql.gz\n\n${NC}"
			$mysqldump -u"$mysql_user" -p"$mysql_password" $firstParameter | pv | gzip -c > "$filename".sql.gz
		else
			"Please specify the file name"
		fi
	else
		echo "Please specify the database to export"
		echo "E.g.: mysql:export database"
	fi

# Import MySQL database
elif [ "$function" == "mysql:import" ]; then
	echo "Please enter the database name to import the selected SQL file: "

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
		read databasename

		if [ ! -z "$databasename" -a "$databasename" != " " ]; then
			printf "${GREEN}pv ${GRAY}${firstParameter}${GREEN} | /applications/MAMP/library/bin/mysql ${GRAY} -u${mysql_user} -p${mysql_password} ${databasename}\n\n${NC}"
			pv $firstParameter | $mysql -u"$mysql_user" -p"$mysql_password" $databasename
		else
			"Please specify the database name"
		fi
	else
		echo "Please specify the SQL file to import"
		echo "E.g.: mysql:import /path/to/file.sql"
	fi

# Download file through SSH on current folder
elif [ "$function" == "ssh:download" ]; then

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then

		echo "Please enter the server IP address or domain: "

		read ipaddress
		if [ ! -z "$ipaddress" -a "$ipaddress" != " " ]; then

			echo "Please enter username: "

			read username

			if [ ! -z "$username" -a "$username" != " " ]; then

				printf "${GREEN}scp ${GRAY}${username}@${ipaddress}:${firstparameter}${GREEN}.\n\n${NC}"
				scp $username@$ipaddress:$firstParameter .

			else
				"Please specify the username for the remote server"
			fi

		else
			"Please specify the server IP address or domain"
		fi

	else
		echo "Please specify the path to the file on the remote server to download"
		echo "E.g.: /home/sample/file.jpg"
	fi

# Upload file to remote server through SSH
elif [ "$function" == "ssh:upload" ]; then

	if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then

		echo "Please enter the server IP address or domain: "

		read ipaddress

		if [ ! -z "$ipaddress" -a "$ipaddress" != " " ]; then

			echo "Please enter username: "

			read username

			if [ ! -z "$username" -a "$username" != " " ]; then

					echo "Please enter path on the remote server to upload the file: "

					read remotepath

					if [ ! -z "$remotepath" -a "$remotepath" != " " ]; then

						scp $firstParameter $username@$ipaddress:$remotepath

					else
						"Please specify the path on the remote server to upload the file"
					fi

			else
				"Please specify the username for the remote server"
			fi

		else
			"Please specify the server IP address or domain"
		fi

	else
		echo "Please specify the path to the file to upload to the remote server"
		echo "E.g.: /user/example/documents/file.pdf"
	fi

# PHP utilities
elif [ "$function" == "php:syntax" ]; then
	echo "Checking PHP syntax for all files in current location...\n"
	find . -name \*.php -exec php -l "{}" \;

# Get battery information
elif [ "$function" == "battery:info" ]; then
	system_profiler SPPowerDataType | awk '/Full/ || /Remaining/ || /Cycle/ { printf }' | sed -e 's/[^:]*/Battery/' -e 's/ *R.*):./\//' -e 's/ *Cycle/ (mAh)     Cycle/'
	
# Get OS X version information
elif [ "$function" == "info" ]; then
	sw_versf
	
# Edit hosts file
elif [ "$function" == "hosts" ]; then
	sudo vi /private/etc/hosts

# SSH key utilities
elif [ "$function" == "ssh-key:copy" ]; then
	pbcopy < ~/.ssh/id_rsa.pub

#--------------------------------------------------------------------
# Performance and maintenance utilities
#--------------------------------------------------------------------

# See memory usage sorted by memory consumption
elif [ "$function" == "memory" ]; then
	top -o MEM

# Empty trash
elif [ "$function" == "trash:empty" ]; then
	sudo rm -rf ~/.Trash/*

# Calculate trash size
elif [ "$function" == "trash:size" ]; then
	echo "Trash size: \n"
	du -sh ~/.Trash/

#--------------------------------------------------------------------
# iTerm utilities
#--------------------------------------------------------------------

# Set title to current iTerm tab
elif [ "$function" == "iterm:tab-title" ]; then
	echo -ne "\033]0;"$allParameters"\007"
	echo "Tab title updated"

#--------------------------------------------------------------------
# GIT utilities
#--------------------------------------------------------------------

# Get last update date for all branches in current project
elif [ "$function" == "git:fresh" ]; then
	get_branch_data |
	  sort -k 1gr |
	  sed "s:^\([0-9]*|\)\(.*\):\2:" |
	  sed -e '1 i\' -e '1 i\
		Branch name|Last commit dated' -e '1 i\
		-----------|-----------------' |
	  column -t -s '|'

# Undo latest commit
elif [ "$function" == "git:undo-commit" ]; then
	git reset --soft HEAD~

# See latest commits IDs and titles for current branch
elif [ "$function" == "git:log" ]; then
	git log --pretty=oneline

# See all branches
elif [ "$function" == "git:branch" ]; then
	git branch -a

# Check GIT settings
elif [ "$function" == "git:settings" ]; then
	git config --list
	
# Remove GIT from current project
elif [ "$function" == "git:remove" ]; then
	find . -name '.git' -exec rm -rf {} \;

# Open current GIT repository URL
elif [ "$function" == "git:open" ]; then
	open `git remote -v | awk '/fetch/{print $2}' | sed -Ee 's#(git@|git://)#http://#' -e 's@com:@com/@'`| head -n1

#--------------------------------------------------------------------
# Homebrew utilities
#--------------------------------------------------------------------

# Get list of installed Homebrew packages
elif [ "$function" == "brew:list" ]; then
	brew list

#--------------------------------------------------------------------
# Development utilities
#--------------------------------------------------------------------

# TODO: Optimize all images in directory (recursive)

#--------------------------------------------------------------------
# XCode utilities
#--------------------------------------------------------------------

elif [ "$function" == "xcode:cleanup" ]; then

	echo "========== Cleanup start =========="

	# define paths
	archivesPath="/Library/Developer/Xcode/Archives"
	derivedDataPath="/Library/Developer/Xcode/DerivedData"
	oldDeviceInfoPath="/Library/Developer/Xcode/iOS DeviceSupport"
	simulatorApplicationRootPath="/Library/Application Support/iPhone Simulator/"
	USER_HOME=$(eval echo ~${SUDO_USER})

	paths=( "$archivesPath" "$derivedDataPath" "$oldDeviceInfoPath" )
	msgs=( "Archives" "DerivedData" "Old device information" )
	pathsLength=${#paths[@]}

	# Clean up developer folder
	# loop through predefined paths
	for (( i=0; i<${pathsLength}; i++ ));
	do
	  CMD="sudo rm -rf "$USER_HOME${paths[$i]}"/*"
	  $CMD
	  echo ${msgs[$i]}" cleared"
	done

	# Clean up iOS Simulator
	ignoreFolders=("Applications" "Containers" "Library" "Root" "User" "tmpspace")
	versionMarker="."

	rootPathIdx=$((${#USER_HOME} + ${#simulatorApplicationRootPath}))
	for folderPath in "$USER_HOME$simulatorApplicationRootPath"*
	do
		length=${#folderPath}
		folderName=${folderPath:$rootPathIdx:$((length - rootPathIdx))}

		# Find folder in ~/Library/Application Support/iPhone Simulator/ with "." (assuming it is simulator version) and not in ignored list
		if [[ "${ignoreFolders[*]}" != *$folderName* && $folderName == *$versionMarker* ]]; then

			# Check if Applications folder exists
			if [ -d "$folderPath/Applications" ]; then
				echo 'iOS Simulator version '$folderName' with applications installed, now cleared'
				tmpFolderPath="${folderPath// /*}"
				CMD="sudo rm -rf "$tmpFolderPath"/Applications"
				$CMD
			fi

			# Check if tmp folder exists
			if [ -d "$folderPath/tmp" ]; then

				# Check tmp files in folder with special prefixs (say ghostlyIcons.xqwj3qwb2)
				tmpFolderPath="${folderPath// /*}"
				hasTmpFiles=false
				for ext in "ghostlyIcons" "gridImages" "iconImages" "iconLabels_gray"
				do
					fileCheckPath="$tmpFolderPath/tmp/$ext.*"
					if (ls $fileCheckPath > /dev/null 2>&1)
					then
					  CMD="sudo rm -rf "$tmpFolderPath"/tmp/$ext.*"
					  $CMD
					  hasTmpFiles=true
					fi
				done

				if ($hasTmpFiles); then
					echo 'iOS Simulator version '$folderName' tmp files cleared'
				fi
			fi
		fi

	done

	echo "========== Cleanup ended =========="
	echo "Suggest you to restart your xcode"
	echo "========== Have a nice day =========="

#--------------------------------------------------------------------
# Online search utilities
#--------------------------------------------------------------------

# TODO: Add "Feeling Lucky" Google Search with parameters to quickly access first result

# TODO: Add Google Search with parameters

#--------------------------------------------------------------------
# Executable apps
#--------------------------------------------------------------------
elif [ "$function" == "firefox" ]; then
	open -a Firefox
elif [ "$function" == "chrome" ]; then
	open -a Google\ Chrome
elif [ "$function" == "safari" ]; then
	open -a Safari
elif [ "$function" == "phpstorm" ]; then
	open -a PHPStorm
elif [ "$function" == "xcode" ]; then
	open -a XCode
elif [ "$function" == "mamp" ]; then
	open -a MAMP
elif [ "$function" == "filezilla" ]; then
	open -a Filezilla
elif [ "$function" == "skype" ]; then
	open -a Skype
elif [ "$function" == "gotomeeting" ]; then
	open -a GoToMeeting
elif [ "$function" == "snippetslab" ]; then
	open -a SnippetsLab
elif [ "$function" == "preview" ]; then
	open -a Preview
elif [ "$function" == "photoshop" ]; then
	open -a Adobe\ Photoshop\ CC\ 2015
elif [ "$function" == "textedit" ]; then
	open -a TextEdit
elif [ "$function" == "sourcetree" ]; then
	open -a SourceTree
elif [ "$function" == "stree" ]; then
	open -a SourceTree ./
elif [ "$function" == "quiver" ]; then
	open -a Quiver
elif [ "$function" == "virtualbox" ]; then
	open -a VirtualBox
elif [ "$function" == "pixelmator" ]; then
	open -a Pixelmator
elif [ "$function" == "vlc" ]; then
	open -a VLC
elif [ "$function" == "kaleidoscope" ]; then
	open -a Kaleidoscope
elif [ "$function" == "mindnode" ]; then
	open -a MindNode
elif [ "$function" == "paw" ]; then
	open -a Paw
elif [ "$function" == "appstore" ]; then
	open -a App\ Store
elif [ "$function" == "goodtask" ]; then
	open -a GoodTask
elif [ "$function" == "notes" ]; then
	open -a Notes

else
	echo "\nCommand not found: "
	echo "$function"
	echo "\nParameters: "
	echo "$allParameters"
fi
